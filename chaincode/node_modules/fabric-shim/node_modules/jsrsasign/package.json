{
  "_args": [
    [
      "jsrsasign@https://registry.npmjs.org/jsrsasign/-/jsrsasign-8.0.12.tgz",
      "/home/upgrad/workspace/pharma-net/chaincode/node_modules/fabric-shim"
    ]
  ],
  "_from": "jsrsasign@https://registry.npmjs.org/jsrsasign/-/jsrsasign-8.0.12.tgz",
  "_id": "jsrsasign@8.0.12",
  "_inCache": true,
  "_location": "/fabric-shim/jsrsasign",
  "_phantomChildren": {},
  "_requested": {
    "name": "jsrsasign",
    "raw": "jsrsasign@https://registry.npmjs.org/jsrsasign/-/jsrsasign-8.0.12.tgz",
    "rawSpec": "https://registry.npmjs.org/jsrsasign/-/jsrsasign-8.0.12.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/jsrsasign/-/jsrsasign-8.0.12.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/fabric-shim"
  ],
  "_resolved": "https://registry.npmjs.org/jsrsasign/-/jsrsasign-8.0.12.tgz",
  "_shasum": "22abb9656d34a30b9530436720835e89c2e5c316",
  "_shrinkwrap": null,
  "_spec": "jsrsasign@https://registry.npmjs.org/jsrsasign/-/jsrsasign-8.0.12.tgz",
  "_where": "/home/upgrad/workspace/pharma-net/chaincode/node_modules/fabric-shim",
  "author": {
    "name": "Kenji Urushima"
  },
  "bugs": {
    "url": "https://github.com/kjur/jsrsasign/issues"
  },
  "dependencies": {},
  "description": "opensource free pure JavaScript cryptographic library supports RSA/RSAPSS/ECDSA/DSA signing/validation, ASN.1, PKCS#1/5/8 private/public key, X.509 certificate, CRL, OCSP, CMS SignedData, TimeStamp and CAdES and JSON Web Signature(JWS)/Token(JWT)/Key(JWK).",
  "devDependencies": {
    "mocha": "~1.7.4"
  },
  "homepage": "https://github.com/kjur/jsrsasign#readme",
  "keywords": [
    "ASN.1",
    "CMS",
    "CRL",
    "CSR",
    "Cipher",
    "Cryptgraphic Message Syntax",
    "DSA",
    "Digital Signature",
    "Digital Timestamp",
    "ECDSA",
    "HMac",
    "JOSE",
    "JSON Web Key",
    "JSON Web Signature",
    "JSON Web Token",
    "JWA",
    "JWK",
    "JWS",
    "JWT",
    "Message Digest",
    "OCSP",
    "PKCS#1",
    "PKCS#10",
    "PKCS#5",
    "PKCS#7",
    "PKCS#8",
    "RFC 3161",
    "RSA",
    "RSAPSS",
    "Signature",
    "Time Stamp Token",
    "Timestamp",
    "X.509",
    "certificate",
    "crypto",
    "cryptography",
    "hash function",
    "private key",
    "public key",
    "signing"
  ],
  "license": "MIT",
  "main": "lib/jsrsasign.js",
  "name": "jsrsasign",
  "optionalDependencies": {},
  "readme": "jsrsasign\r\n=========\r\n\r\nThe 'jsrsasign' (RSA-Sign JavaScript Library) is an opensource free pure JavaScript cryptographic library supports RSA/RSAPSS/ECDSA/DSA signing/validation, ASN.1, PKCS#1/5/8 private/public key, X.509 certificate, CRL, CMS SignedData, TimeStamp and CAdES and JSON Web Signature(JWS)/Token(JWT)/Key(JWK).\r\n\r\n[![license](https://img.shields.io/badge/license-MIT-green.svg?style=flat)](https://github.com/kjur/jsrsasign/blob/master/LICENSE.txt)\r\n[![bower](https://img.shields.io/bower/v/jsrsasign.svg?maxAge=2592000)](https://libraries.io/bower/jsrsasign)\r\n[![npm version](https://badge.fury.io/js/jsrsasign.svg)](https://badge.fury.io/js/jsrsasign)\r\n[![CDNJS](https://img.shields.io/cdnjs/v/jsrsasign.svg)](https://cdnjs.com/libraries/jsrsasign)\r\n\r\nPublic page is https://kjur.github.io/jsrsasign .\r\n\r\n[github TOP](https://kjur.github.io/jsrsasign/)|[API doc](https://kjur.github.io/jsrsasign/api/)|[Wiki](https://github.com/kjur/jsrsasign/wiki)|[Node sample](https://github.com/kjur/jsrsasign/tree/master/sample_node)\r\n\r\nDIFFERENCE WITH CRYPTO MODULE\r\n-----------------------------\r\n\r\nHere is the difference between bundled ['Crypto' module](http://nodejs.org/api/crypto.html) \r\nand this 'jsrsasign' module.\r\n\r\n- Crypto module\r\n    - fast\r\n    - works only on Node.js\r\n    - OpenSSL based\r\n    - lacking ASN.1 functionality\r\n    - provides symmetric ciphers\r\n    - lacking RSAPSS signing\r\n- jsrsasign module\r\n    - slow\r\n    - implemented in pure JavaScript\r\n    - works on both Node.js(server) and browsers(client)\r\n    - provides ASN.1 parsing/generation functionality\r\n    - lacking symmetric ciphers\r\n    - provides RSAPSS signing\r\n    - also provides support for JSON Web Signatures (JWS) and JSON Web Token (JWT)\r\n\r\nAVAILABLE CLASSES AND METHODS\r\n-----------------------------\r\n\r\nMost of the classes and methods defined in jsrsasign \r\navailable in this jsrsasign npm module.\r\n\r\nAfter loading the module,\r\n\r\n    > var r = require('jsrsasign');\r\n    > var r = require('jsrsasign-util'); // for file I/O utilities\r\n\r\nYou can refer name spaces, classes, methods and functions \r\nby following variables:\r\n\r\n- r.BigInteger - BigInteger class\r\n- r.RSAKey - [RSAKey class](https://kjur.github.io/jsrsasign/api/symbols/RSAKey.html)\r\n- r.ECDSA - [KJUR.crypto.ECDSA class](https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.ECDSA.html)\r\n- r.DSA - [KJUR.crypto.DSA class](https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.DSA.html)\r\n- r.Signature - [KJUR.crypto.Signature class](https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Signature.html)\r\n- r.MessageDigest - [KJUR.crypto.MessageDigest class](https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.MessageDigest.html)\r\n- r.Mac - [KJUR.crypto.Mac class](https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Mac.html)\r\n- r.KEYUTIL - [KEYUTIL class](https://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html)\r\n- r.ASN1HEX - [ASN1HEX class](https://kjur.github.io/jsrsasign/api/symbols/ASN1HEX.html)\r\n- r.crypto - [KJUR.crypto name space](https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.html)\r\n- r.asn1 - [KJUR.asn1 name space](https://kjur.github.io/jsrsasign/api/symbols/KJUR.asn1.html)\r\n- r.jws - [KJUR.jws name space](https://kjur.github.io/jsjws/api/)\r\n\r\nPlease see API reference in the above links.\r\n\r\nEXAMPLE(1) SIGNATURE\r\n--------------------\r\n\r\nLoading encrypted PKCS#5 private key:\r\n\r\n    > var rs = require('jsrsasign');\r\n    > var rsu = require('jsrsasign-util');\r\n    > var pem = rsu.readFile('z1.prv.p5e.pem');\r\n    > var prvKey = rs.KEYUTIL.getKey(pem, 'passwd');\r\n\r\nSign string 'aaa' with the loaded private key:\r\n\r\n    > var sig = new a.Signature({alg: 'SHA1withRSA'});\r\n    > sig.init(prvKey);\r\n    > sig.updateString('aaa');\r\n    > var sigVal = sig.sign();\r\n    > sigVal\r\n    'd764dcacb...'\r\n\r\nMORE TUTORIALS AND SAMPLES\r\n--------------------\r\n- [Tutorials in GitHub Wiki](https://github.com/kjur/jsrsasign/wiki)\r\n- [Sample Node Scripts](https://github.com/kjur/jsrsasign/tree/master/sample_node)\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kjur/jsrsasign.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "8.0.12"
}
